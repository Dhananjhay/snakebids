bids_dir: '/path/to/bids_dir'
output_dir: '/path/to/output_dir'

#enable printing debug statements during parsing -- disable if generating dag visualization
debug: False

derivatives: True #will search in bids/derivatives if True; can also be path(s) to derivatives datasets

#list of analysis levels in the bids app 
analysis_levels: &analysis_levels
 - participant
  

#mapping from analysis_level to set of target rules or files
targets_by_analysis_level:
  participant:
    - ''  # if '', then the first rule is run

#this configures the pybids grabber - create an entry for each type of input you want to grab
# indexed by name of input
#   dictionary for each input is passed directly to pybids get()
#    https://bids-standard.github.io/pybids/generated/bids.layout.BIDSLayout.html#bids.layout.BIDSLayout.get

pybids_inputs:
  dwi:
    filters:
      suffix: 'dwi'
      extension: '.nii.gz'
      scope: 'raw' #raw, derivatives (or can be pipeline name too!)
      invalid_filters: 'allow'
      datatype: 'dwi'
    wildcards:
      - subject
      - session
      - acquisition
      - run
      - dir

  t1w_preproc:
    filters:
      suffix: 'T1w'
      extension: '.nii.gz'
      scope: 'derivatives' #raw, derivatives (or can be pipeline name too!)
      datatype: 'anat'
      invalid_filters: 'allow'
      desc: 'preproc'
      space: null
    wildcards:
      - subject
      - session
      - acquisition
      - run

   

#configuration for the command-line parameters to make available
# passed on the argparse add_argument()
parse_args:

#---  core BIDS-app options --- (do not modify below) 

  bids_dir:
    help: The directory with the input dataset formatted according 
          to the BIDS standard.

  output_dir:
    help: The directory where the output files 
          should be stored. If you are running group level analysis
          this folder should be prepopulated with the results of the
          participant level analysis.

  analysis_level: 
    help: Level of the analysis that will be performed. 
    choices: *analysis_levels

  --participant_label:
    help: The label(s) of the participant(s) that should be analyzed. The label 
          corresponds to sub-<participant_label> from the BIDS spec 
          (so it does not include "sub-"). If this parameter is not 
          provided all subjects should be analyzed. Multiple 
          participants can be specified with a space separated list.
    nargs: '+'

  --exclude_participant_label:
    help: The label(s) of the participant(s) that should be excluded. The label 
          corresponds to sub-<participant_label> from the BIDS spec 
          (so it does not include "sub-"). If this parameter is not 
          provided all subjects should be analyzed. Multiple 
          participants can be specified with a space separated list.
    nargs: '+'

 # custom command-line parameters can then be added, these will get added to the config
 # below is an example to override config['template']
  --template:
    help: Specify custom template


#--- workflow specific configuration -- below is just an example:


#singularity containers
singularity:
  prepdwi: '/project/6050199/akhanf/singularity/bids-apps/khanlab_prepdwi_latest.sif'  #should use mrtrix3.0 container instead
  ants: '/project/6050199/akhanf/singularity/ants-v2.3.1.sif'
  fsl: '/project/6050199/akhanf/singularity/bids-apps/fsl_6.0.3_cuda9.1.sif' 




resample_dwi:
  resample_scheme: 'orig' # should be one of: ['T1w', 'orig', 'custom']
  custom_resolution: #only needed if the 'custom' 
  resample_mm: 
    - 1.0
    - 1.0
    - 1.0

template: MNI152NLin2009cSym

ants:
  dim: 3
  random_seed: 42 #requires ants version at least 2.3.1 (includes --random-seed option)
  intensity_opts: '-u 1 -w [0.01,0.99] -z 1'
  linear:
    reg_iterations: '1000x500x250x0'
    shrink_factors: '6x4x2x1'
    smoothing_factors: '4x2x1x0'
  deform:
    shrink_factors: '12x6x4x2x1'  # default in antsMVTC2: 6x4x2x1 
    smoothing_factors: '6x3x2x1x0vox' # default in antsMVTC2: 3x2x1x0 
    reg_iterations: '100x100x70x50x10' # default in antsMVTC2: 100x100x70x20 
    transform_model: 'SyN[0.1,3,0]'
    sim_metric: CC
  shape_update:
  gradient_step: 0.25

#we convert flags and opts automatically 
#so feel free to prescribe options that are not included here 
#as long as they are passed to eddy using --name_of_flag or --name_of_opts=value
eddy:
  flags:
    verbose: True
    repol: True
    cnr_maps: True
    residuals: True
    data_is_shelled: True
  opts:
    mporder: 6
    s2v_niter: 5
    s2v_lambda: 1
    s2v_interp: trilinear
    ol_type: 'both'  #can be sw, gw, or both (use sw if no multi-band)
    
