"""
This type stub file was generated by pyright.
"""
from __future__ import annotations

from datetime import date
from typing import Any, Callable

from typing_extensions import ParamSpec, TypeAlias, TypedDict, TypeVar

_P = ParamSpec("_P")
_T = TypeVar("_T")
MessageLocations: TypeAlias = ...

class Config(TypedDict):
    message_location: MessageLocations
    ...

config = ...

def set_config(message_location: MessageLocations | None = ...): ...

class DeprecatedWarning(DeprecationWarning):
    """A warning class for deprecated methods

    This is a specialization of the built-in :class:`DeprecationWarning`,
    adding parameters that allow us to get information into the __str__
    that ends up being sent through the :mod:`warnings` system.
    The attributes aren't able to be retrieved after the warning gets
    raised and passed through the system as only the class--not the
    instance--and message are what gets preserved.

    Args
        function: The function being deprecated. deprecated_in: The version that
            ``function`` is deprecated in removed_in: The version or
            :class:`datetime.date` specifying when ``function`` gets removed.
        details: Optional details about the deprecation. Most often this will include
            directions on what to use instead of the now deprecated code.
    """

    def __init__(self, function, deprecated_in, removed_in, details=...) -> None: ...
    def __str__(self) -> str: ...

class UnsupportedWarning(DeprecatedWarning):
    """A warning class for methods to be removed

    This is a subclass of :class:`~deprecation.DeprecatedWarning` and is used
    to output a proper message about a function being unsupported.
    Additionally, the :func:`~deprecation.fail_if_not_removed` decorator
    will handle this warning and cause any tests to fail if the system
    under test uses code that raises this warning.
    """

    def __str__(self) -> str: ...

_FuncT = TypeVar("_FuncT", bound=Callable[..., Any])

def deprecated(
    deprecated_in: str | None = ...,
    removed_in: str | date | None = ...,
    current_version: str | None = ...,
    details: str = ...,
    admonition: str | None = ...,
) -> Callable[[_FuncT], _FuncT]:
    """Decorate a function to signify its deprecation

    This function wraps a method that will soon be removed and does two things:
        * The docstring of the method will be modified to include a notice
          about deprecation, e.g., "Deprecated since 0.9.11. Use foo instead."
        * Raises a :class:`~deprecation.DeprecatedWarning`
          via the :mod:`warnings` module, which is a subclass of the built-in
          :class:`DeprecationWarning`. Note that built-in
          :class:`DeprecationWarning`s are ignored by default, so for users
          to be informed of said warnings they will need to enable them--see
          the :mod:`warnings` module documentation for more details.

    Args:
        deprecated_in: The version at which the decorated method is considered
            deprecated. This will usually be the next version to be released when the
            decorator is added. The default is **None**, which effectively means
            immediate deprecation. If this is not specified, then the `removed_in` and
            `current_version` arguments are ignored.
        removed_in: The version or :class:`datetime.date` when the decorated method will
            be removed. The default is **None**, specifying that the function is not
            currently planned to be removed. Note: This parameter cannot be set to a
            value if `deprecated_in=None`.
        current_version: The source of version information for the currently running
            code. This will usually be a `__version__` attribute on your library. The
            default is `None`. When `current_version=None` the automation to determine
            if the wrapped function is actually in a period of deprecation or time for
            removal does not work, causing a :class:`~deprecation.DeprecatedWarning` to
            be raised in all cases.
        details: Extra details to be added to the method docstring and warning. For
            example, the details may point users to a replacement method, such as "Use
            the foo_bar method instead". By default there are no details.
    """
    ...

def fail_if_not_removed(
    method,
):  # -> _Wrapped[(...), Unknown, (*args: Unknown, **kwargs: Unknown), Unknown]:
    """Decorate a test method to track removal of deprecated code

    This decorator catches :class:`~deprecation.UnsupportedWarning`
    warnings that occur during testing and causes unittests to fail,
    making it easier to keep track of when code should be removed.

    Raises:
        Assertion Error
        is raised while running the test method.
    """
    ...
